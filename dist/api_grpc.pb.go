// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: src/api.proto

package dist

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SetMakerServiceClient is the client API for SetMakerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SetMakerServiceClient interface {
	// artists
	GetArtist(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Artist, error)
	CreateArtist(ctx context.Context, in *CreateArtistRequest, opts ...grpc.CallOption) (*Artist, error)
	UpdateArtist(ctx context.Context, in *UpdateArtistRequest, opts ...grpc.CallOption) (*Artist, error)
	DeleteArtist(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*DeleteArtistResponse, error)
	ListArtists(ctx context.Context, in *ListArtistsRequest, opts ...grpc.CallOption) (*ListArtistsResponse, error)
	// songs
	GetSong(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Song, error)
	CreateSong(ctx context.Context, in *CreateSongRequest, opts ...grpc.CallOption) (*Song, error)
	UpdateSong(ctx context.Context, in *UpdateSongRequest, opts ...grpc.CallOption) (*Song, error)
	DeleteSong(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*DeleteSongResponse, error)
	ListSongs(ctx context.Context, in *ListSongsRequest, opts ...grpc.CallOption) (*ListSongsResponse, error)
	ListSongsByArtist(ctx context.Context, in *ListSongsByArtistRequest, opts ...grpc.CallOption) (*ListSongsResponse, error)
}

type setMakerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSetMakerServiceClient(cc grpc.ClientConnInterface) SetMakerServiceClient {
	return &setMakerServiceClient{cc}
}

func (c *setMakerServiceClient) GetArtist(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Artist, error) {
	out := new(Artist)
	err := c.cc.Invoke(ctx, "/api.SetMakerService/GetArtist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *setMakerServiceClient) CreateArtist(ctx context.Context, in *CreateArtistRequest, opts ...grpc.CallOption) (*Artist, error) {
	out := new(Artist)
	err := c.cc.Invoke(ctx, "/api.SetMakerService/CreateArtist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *setMakerServiceClient) UpdateArtist(ctx context.Context, in *UpdateArtistRequest, opts ...grpc.CallOption) (*Artist, error) {
	out := new(Artist)
	err := c.cc.Invoke(ctx, "/api.SetMakerService/UpdateArtist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *setMakerServiceClient) DeleteArtist(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*DeleteArtistResponse, error) {
	out := new(DeleteArtistResponse)
	err := c.cc.Invoke(ctx, "/api.SetMakerService/DeleteArtist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *setMakerServiceClient) ListArtists(ctx context.Context, in *ListArtistsRequest, opts ...grpc.CallOption) (*ListArtistsResponse, error) {
	out := new(ListArtistsResponse)
	err := c.cc.Invoke(ctx, "/api.SetMakerService/ListArtists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *setMakerServiceClient) GetSong(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Song, error) {
	out := new(Song)
	err := c.cc.Invoke(ctx, "/api.SetMakerService/GetSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *setMakerServiceClient) CreateSong(ctx context.Context, in *CreateSongRequest, opts ...grpc.CallOption) (*Song, error) {
	out := new(Song)
	err := c.cc.Invoke(ctx, "/api.SetMakerService/CreateSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *setMakerServiceClient) UpdateSong(ctx context.Context, in *UpdateSongRequest, opts ...grpc.CallOption) (*Song, error) {
	out := new(Song)
	err := c.cc.Invoke(ctx, "/api.SetMakerService/UpdateSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *setMakerServiceClient) DeleteSong(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*DeleteSongResponse, error) {
	out := new(DeleteSongResponse)
	err := c.cc.Invoke(ctx, "/api.SetMakerService/DeleteSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *setMakerServiceClient) ListSongs(ctx context.Context, in *ListSongsRequest, opts ...grpc.CallOption) (*ListSongsResponse, error) {
	out := new(ListSongsResponse)
	err := c.cc.Invoke(ctx, "/api.SetMakerService/ListSongs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *setMakerServiceClient) ListSongsByArtist(ctx context.Context, in *ListSongsByArtistRequest, opts ...grpc.CallOption) (*ListSongsResponse, error) {
	out := new(ListSongsResponse)
	err := c.cc.Invoke(ctx, "/api.SetMakerService/ListSongsByArtist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SetMakerServiceServer is the server API for SetMakerService service.
// All implementations must embed UnimplementedSetMakerServiceServer
// for forward compatibility
type SetMakerServiceServer interface {
	// artists
	GetArtist(context.Context, *wrapperspb.StringValue) (*Artist, error)
	CreateArtist(context.Context, *CreateArtistRequest) (*Artist, error)
	UpdateArtist(context.Context, *UpdateArtistRequest) (*Artist, error)
	DeleteArtist(context.Context, *wrapperspb.StringValue) (*DeleteArtistResponse, error)
	ListArtists(context.Context, *ListArtistsRequest) (*ListArtistsResponse, error)
	// songs
	GetSong(context.Context, *wrapperspb.StringValue) (*Song, error)
	CreateSong(context.Context, *CreateSongRequest) (*Song, error)
	UpdateSong(context.Context, *UpdateSongRequest) (*Song, error)
	DeleteSong(context.Context, *wrapperspb.StringValue) (*DeleteSongResponse, error)
	ListSongs(context.Context, *ListSongsRequest) (*ListSongsResponse, error)
	ListSongsByArtist(context.Context, *ListSongsByArtistRequest) (*ListSongsResponse, error)
	mustEmbedUnimplementedSetMakerServiceServer()
}

// UnimplementedSetMakerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSetMakerServiceServer struct {
}

func (UnimplementedSetMakerServiceServer) GetArtist(context.Context, *wrapperspb.StringValue) (*Artist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtist not implemented")
}
func (UnimplementedSetMakerServiceServer) CreateArtist(context.Context, *CreateArtistRequest) (*Artist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArtist not implemented")
}
func (UnimplementedSetMakerServiceServer) UpdateArtist(context.Context, *UpdateArtistRequest) (*Artist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArtist not implemented")
}
func (UnimplementedSetMakerServiceServer) DeleteArtist(context.Context, *wrapperspb.StringValue) (*DeleteArtistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArtist not implemented")
}
func (UnimplementedSetMakerServiceServer) ListArtists(context.Context, *ListArtistsRequest) (*ListArtistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArtists not implemented")
}
func (UnimplementedSetMakerServiceServer) GetSong(context.Context, *wrapperspb.StringValue) (*Song, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSong not implemented")
}
func (UnimplementedSetMakerServiceServer) CreateSong(context.Context, *CreateSongRequest) (*Song, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSong not implemented")
}
func (UnimplementedSetMakerServiceServer) UpdateSong(context.Context, *UpdateSongRequest) (*Song, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSong not implemented")
}
func (UnimplementedSetMakerServiceServer) DeleteSong(context.Context, *wrapperspb.StringValue) (*DeleteSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSong not implemented")
}
func (UnimplementedSetMakerServiceServer) ListSongs(context.Context, *ListSongsRequest) (*ListSongsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSongs not implemented")
}
func (UnimplementedSetMakerServiceServer) ListSongsByArtist(context.Context, *ListSongsByArtistRequest) (*ListSongsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSongsByArtist not implemented")
}
func (UnimplementedSetMakerServiceServer) mustEmbedUnimplementedSetMakerServiceServer() {}

// UnsafeSetMakerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SetMakerServiceServer will
// result in compilation errors.
type UnsafeSetMakerServiceServer interface {
	mustEmbedUnimplementedSetMakerServiceServer()
}

func RegisterSetMakerServiceServer(s grpc.ServiceRegistrar, srv SetMakerServiceServer) {
	s.RegisterService(&SetMakerService_ServiceDesc, srv)
}

func _SetMakerService_GetArtist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SetMakerServiceServer).GetArtist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SetMakerService/GetArtist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SetMakerServiceServer).GetArtist(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _SetMakerService_CreateArtist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateArtistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SetMakerServiceServer).CreateArtist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SetMakerService/CreateArtist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SetMakerServiceServer).CreateArtist(ctx, req.(*CreateArtistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SetMakerService_UpdateArtist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArtistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SetMakerServiceServer).UpdateArtist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SetMakerService/UpdateArtist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SetMakerServiceServer).UpdateArtist(ctx, req.(*UpdateArtistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SetMakerService_DeleteArtist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SetMakerServiceServer).DeleteArtist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SetMakerService/DeleteArtist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SetMakerServiceServer).DeleteArtist(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _SetMakerService_ListArtists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListArtistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SetMakerServiceServer).ListArtists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SetMakerService/ListArtists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SetMakerServiceServer).ListArtists(ctx, req.(*ListArtistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SetMakerService_GetSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SetMakerServiceServer).GetSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SetMakerService/GetSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SetMakerServiceServer).GetSong(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _SetMakerService_CreateSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SetMakerServiceServer).CreateSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SetMakerService/CreateSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SetMakerServiceServer).CreateSong(ctx, req.(*CreateSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SetMakerService_UpdateSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SetMakerServiceServer).UpdateSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SetMakerService/UpdateSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SetMakerServiceServer).UpdateSong(ctx, req.(*UpdateSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SetMakerService_DeleteSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SetMakerServiceServer).DeleteSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SetMakerService/DeleteSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SetMakerServiceServer).DeleteSong(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _SetMakerService_ListSongs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSongsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SetMakerServiceServer).ListSongs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SetMakerService/ListSongs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SetMakerServiceServer).ListSongs(ctx, req.(*ListSongsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SetMakerService_ListSongsByArtist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSongsByArtistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SetMakerServiceServer).ListSongsByArtist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SetMakerService/ListSongsByArtist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SetMakerServiceServer).ListSongsByArtist(ctx, req.(*ListSongsByArtistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SetMakerService_ServiceDesc is the grpc.ServiceDesc for SetMakerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SetMakerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.SetMakerService",
	HandlerType: (*SetMakerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetArtist",
			Handler:    _SetMakerService_GetArtist_Handler,
		},
		{
			MethodName: "CreateArtist",
			Handler:    _SetMakerService_CreateArtist_Handler,
		},
		{
			MethodName: "UpdateArtist",
			Handler:    _SetMakerService_UpdateArtist_Handler,
		},
		{
			MethodName: "DeleteArtist",
			Handler:    _SetMakerService_DeleteArtist_Handler,
		},
		{
			MethodName: "ListArtists",
			Handler:    _SetMakerService_ListArtists_Handler,
		},
		{
			MethodName: "GetSong",
			Handler:    _SetMakerService_GetSong_Handler,
		},
		{
			MethodName: "CreateSong",
			Handler:    _SetMakerService_CreateSong_Handler,
		},
		{
			MethodName: "UpdateSong",
			Handler:    _SetMakerService_UpdateSong_Handler,
		},
		{
			MethodName: "DeleteSong",
			Handler:    _SetMakerService_DeleteSong_Handler,
		},
		{
			MethodName: "ListSongs",
			Handler:    _SetMakerService_ListSongs_Handler,
		},
		{
			MethodName: "ListSongsByArtist",
			Handler:    _SetMakerService_ListSongsByArtist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/api.proto",
}
